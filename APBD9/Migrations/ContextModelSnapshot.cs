// <auto-generated />
using System;
using APBD9.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APBD9.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APBD8.Models.Doctor", b =>
            {
                b.Property<int>("IdDoctor")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDoctor"));

                b.Property<string>("Email")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("IdDoctor")
                    .HasName("Doctor_PK");

                b.ToTable("Doctor", (string)null);

                b.HasData(
                    new
                    {
                        IdDoctor = 1,
                        Email = "jerzyuzdrowiciel@gmail.com",
                        FirstName = "Jerzy",
                        LastName = "Uzdrowiciel"
                    },
                    new
                    {
                        IdDoctor = 2,
                        Email = "annarecepta@gmail.com",
                        FirstName = "Anna",
                        LastName = "Recepta"
                    });
            });

            modelBuilder.Entity("APBD8.Models.Medicament", b =>
            {
                b.Property<int>("IdMedicament")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMedicament"));

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("Type")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("IdMedicament")
                    .HasName("IdMedicament_PK");

                b.ToTable("Medicament", (string)null);
            });

            modelBuilder.Entity("APBD8.Models.Patient", b =>
            {
                b.Property<int>("IdPatient")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPatient"));

                b.Property<DateTime>("BirthDate")
                    .HasColumnType("datetime2");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("LastName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.HasKey("IdPatient")
                    .HasName("Patient_PK");

                b.ToTable("Patient", (string)null);

                b.HasData(
                    new
                    {
                        IdPatient = 1,
                        BirthDate = new DateTime(1993, 1, 11, 20, 4, 59, 806, DateTimeKind.Local).AddTicks(2962),
                        FirstName = "Bella",
                        LastName = "Ćwir"
                    },
                    new
                    {
                        IdPatient = 2,
                        BirthDate = new DateTime(1965, 1, 11, 20, 4, 59, 806, DateTimeKind.Local).AddTicks(3002),
                        FirstName = "Jan",
                        LastName = "Nowak"
                    });
            });

            modelBuilder.Entity("APBD8.Models.Prescription", b =>
            {
                b.Property<int>("PrescriptionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                b.Property<DateTime>("Date")
                    .HasColumnType("datetime2");

                b.Property<DateTime>("DueDate")
                    .HasColumnType("datetime2");

                b.Property<int>("IdDoctor")
                    .HasColumnType("int");

                b.Property<int>("IdPatient")
                    .HasColumnType("int");

                b.HasKey("PrescriptionId")
                    .HasName("PrescriptionId_PK");

                b.HasIndex("IdDoctor");

                b.HasIndex("IdPatient");

                b.ToTable("Prescription", (string)null);

                b.HasData(
                    new
                    {
                        PrescriptionId = 1,
                        Date = new DateTime(2023, 1, 11, 20, 4, 59, 807, DateTimeKind.Local).AddTicks(7082),
                        DueDate = new DateTime(2023, 4, 11, 20, 4, 59, 807, DateTimeKind.Local).AddTicks(7100),
                        IdDoctor = 2,
                        IdPatient = 1
                    },
                    new
                    {
                        PrescriptionId = 2,
                        Date = new DateTime(2023, 1, 6, 20, 4, 59, 807, DateTimeKind.Local).AddTicks(7107),
                        DueDate = new DateTime(2023, 3, 12, 20, 4, 59, 807, DateTimeKind.Local).AddTicks(7109),
                        IdDoctor = 1,
                        IdPatient = 2
                    });
            });

            modelBuilder.Entity("APBD8.Models.PrescriptionMedicament", b =>
            {
                b.Property<int>("IdPrescription")
                    .HasColumnType("int");

                b.Property<int>("IdMedicament")
                    .HasColumnType("int");

                b.Property<string>("Details")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<int>("Dose")
                    .HasColumnType("int");

                b.HasKey("IdPrescription", "IdMedicament")
                    .HasName("IdPrescriptionIdMedicament_PK");

                b.HasIndex("IdMedicament");

                b.ToTable("PrescriptionMedicament", (string)null);

                b.HasData(
                    new
                    {
                        IdPrescription = 2,
                        IdMedicament = 1,
                        Details = "2 tabletki dziennie",
                        Dose = 100
                    },
                    new
                    {
                        IdPrescription = 1,
                        IdMedicament = 2,
                        Details = "3 łyżeczki syropu dziennie",
                        Dose = 200
                    });
            });

            modelBuilder.Entity("APBD8.Models.Prescription", b =>
            {
                b.HasOne("APBD8.Models.Doctor", "IDoctorNavigation")
                    .WithMany("Prescriptions")
                    .HasForeignKey("IdDoctor")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("Doctor_Prescription_FK");

                b.HasOne("APBD8.Models.Patient", "IPatientNavigation")
                    .WithMany("Prescriptions")
                    .HasForeignKey("IdPatient")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("Patient_Prescription_FK");

                b.Navigation("IDoctorNavigation");

                b.Navigation("IPatientNavigation");
            });

            modelBuilder.Entity("APBD8.Models.PrescriptionMedicament", b =>
            {
                b.HasOne("APBD8.Models.Medicament", "IMedicamentNavigation")
                    .WithMany("PrescriptionMedicaments")
                    .HasForeignKey("IdMedicament")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("Medicament_Prescription_FK");

                b.HasOne("APBD8.Models.Prescription", "IPrescriptionNavigation")
                    .WithMany("PrescriptionMedicaments")
                    .HasForeignKey("IdPrescription")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired()
                    .HasConstraintName("Prescription_Medicament>FK");

                b.Navigation("IMedicamentNavigation");

                b.Navigation("IPrescriptionNavigation");
            });

            modelBuilder.Entity("APBD8.Models.Doctor", b =>
            {
                b.Navigation("Prescriptions");
            });

            modelBuilder.Entity("APBD8.Models.Medicament", b =>
            {
                b.Navigation("PrescriptionMedicaments");
            });

            modelBuilder.Entity("APBD8.Models.Patient", b =>
            {
                b.Navigation("Prescriptions");
            });

            modelBuilder.Entity("APBD8.Models.Prescription", b =>
            {
                b.Navigation("PrescriptionMedicaments");
            });
#pragma warning restore 612, 618
        }
    }
}